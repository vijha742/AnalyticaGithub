type User {
    id: ID!
    login: String!
    githubUsername: String!
    name: String
    email: String
    avatarUrl: String
    bio: String
    followersCount: Int
    followingCount: Int
    publicReposCount: Int
    totalContributions: Int
    lastUpdated: String
    lastRefreshed: String
    repositories(first: Int, after: String): RepositoryConnection!
    repositoriesLegacy: [Repository!]
    contributions: [Contribution!]
    contributionCalendar: ContributionCalendar
}

type SuggestedUser {
    id: ID!
    githubUsername: String!
    name: String
    email: String
    avatarUrl: String
    bio: String
    followersCount: Int
    followingCount: Int
    publicReposCount: Int
    totalContributions: Int
    lastRefreshed: String
    repositories: [Repository!]
    contributions: [Contribution!]
    suggestedBy: String
    suggestedAt: String
    active: Boolean
}
type Repository {
    id: ID!
    name: String!
    description: String
    language: String
    stargazerCount: Int
    forkCount: Int
    isPrivate: Boolean!
    createdAt: String!
    updatedAt: String!
    languages(first: Int, after: String, orderBy: LanguageOrder): LanguageConnection!
    repositoryTopics(first: Int, after: String): RepositoryTopicConnection!
}
type RepositoryConnection {
    nodes: [Repository!]!
    edges: [RepositoryEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type RepositoryEdge {
    node: Repository!
    cursor: String!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

type RepositoryTopicConnection {
    nodes: [RepositoryTopic!]!
    edges: [RepositoryTopicEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}
type RepositoryTopic {
    id: ID!
    topic: Topic!
}

type RepositoryTopicEdge {
    node: RepositoryTopic!
    cursor: String!
}

type Topic {
    id: ID!
    name: String!
}

type LanguageConnection {
    edges: [LanguageEdge!]!
    nodes: [Language!]!
    totalSize: Int!
    pageInfo: PageInfo!
}

type LanguageEdge {
    size: Int!
    node: Language!
    cursor: String!
}

type Language {
    id: ID!
    name: String!
    color: String
}

input LanguageOrder {
    field: LanguageOrderField!
    direction: OrderDirection!
}

enum LanguageOrderField {
    SIZE
    NAME
}

enum OrderDirection {
    ASC
    DESC
}

type Contribution {
    id: ID!
    date: String!
    count: Int!
    type: ContributionType!
}

enum ContributionType {
    COMMIT
    PULL_REQUEST
    ISSUE
    CODE_REVIEW
}

type Query {
    user(login: String, username: String): User
    users(limit: Int, offset: Int): [User!]!
    searchUsers(query: String!, limit: Int, offset: Int): [User!]!
    rateLimit: RateLimit!
    suggestedUsers: [SuggestedUser!]!
    contributionsTimeSeries(
        username: String!,
        timeFrame: TimeFrame!,
        startDate: String,
        endDate: String,
        contributionTypes: [ContributionType!]
    ): ContributionTimeSeries!
}

type Mutation {
    suggestUser(githubUsername: String!, suggestedBy: String!): SuggestedUser
    refreshUserData(githubUsername: String!): SuggestedUser
    deactivateSuggestedUser(id: ID!): Boolean
}

type RateLimit {
    limit: Int!
    remaining: Int!
    resetAt: String!
}

type ContributionCalendar {
    totalContributions: Int!
    weeks: [ContributionWeek!]!
}

type ContributionWeek {
    firstDay: String!
    contributionDays: [ContributionDay!]!
}

type ContributionDay {
    date: String!
    contributionCount: Int!
    contributionLevel: ContributionLevel!
}

enum ContributionLevel {
    NONE
    FIRST_QUARTILE
    SECOND_QUARTILE
    THIRD_QUARTILE
    FOURTH_QUARTILE
}

type TimeSeriesDataPoint {
    date: String!
    count: Int!
}

type ContributionTimeSeries {
    points: [TimeSeriesDataPoint!]!
    totalCount: Int!
    periodStart: String!
    periodEnd: String!
}

enum TimeFrame {
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}